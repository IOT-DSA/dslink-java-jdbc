apply plugin: 'application'
apply plugin: 'findbugs'
apply plugin: 'java-library'

mainClassName = 'org.dsa.iot.jdbc.JdbcDslink'
sourceCompatibility = 1.7
targetCompatibility = 1.7
version = '0.2.1'

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

wrapper {
    gradleVersion = '4.10.2'
}

dependencies {
    compileOnly 'com.google.code.findbugs:annotations:[3.0.1,)'
    implementation 'com.h2database:h2:1.4.197'
    implementation 'org.apache.commons:commons-dbcp2:2.5.0'
    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'org.apache.commons:commons-pool2:2.6.0'
    implementation 'org.postgresql:postgresql:42.2.5.jre7'
    implementation 'mysql:mysql-connector-java:6.0.6'
    api 'org.iot-dsa:dslink:0.20.1'
    api 'org.iot-dsa:commons:0.20.1'
}

run {
    args System.getProperty("exec.args", "").split() + "-d" + "../dslink.json"
    workingDir project.buildDir
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

applicationDistribution.from new File(project.projectDir, "/dslink.json")

startScripts {
    def configureClasspathVar = { findClasspath, pathSeparator, slash, variable, line ->
        line = line.replaceAll(~/^${findClasspath}=.*$/) { original ->
            original += "${pathSeparator}${variable}lib${slash}*"
        }
    }

    def configureUnixClasspath = configureClasspathVar.curry('CLASSPATH', ':', '/', '\$APP_HOME/')
    def configureWindowsClasspath = configureClasspathVar.curry('set CLASSPATH', ';', '\\', '%APP_HOME%\\')

    doLast {
        unixScript.text =
                unixScript
                        .readLines()
                        .collect(configureUnixClasspath)
                        .join('\n')

        windowsScript.text =
                windowsScript
                        .readLines()
                        .collect(configureWindowsClasspath)
                        .join('\r\n')

    }
}
